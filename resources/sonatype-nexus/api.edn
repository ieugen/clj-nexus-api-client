{:v1 {:getPrivileges {:summary "Retrieve a list of privileges.", :method :get, :path "/v1/security/privileges", :params ()}, :getSystemStatusChecks {:summary "Health check endpoint that returns the results of the system status checks", :method :get, :path "/v1/status/check", :params ()}, :getRepository_24 {:summary "Get repository", :method :get, :path "/v1/repositories/helm/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :updateRepository_26 {:summary "Update PyPI group repository", :method :put, :path "/v1/repositories/pypi/group/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :updateRepository_30 {:summary "Update Conan proxy repository", :method :put, :path "/v1/repositories/conan/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :getRepository_2 {:summary "Get repository", :method :get, :path "/v1/repositories/maven/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :getRepository_21 {:summary "Get repository", :method :get, :path "/v1/repositories/yum/group/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :deleteRoutingRule {:summary "Delete a single routing rule", :method :delete, :path "/v1/routing-rules/{name}", :params ({:name "name", :in :path})}, :getRepository_36 {:summary "Get repository", :method :get, :path "/v1/repositories/go/group/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :createRepository_14 {:summary "Create RubyGems group repository", :method :post, :path "/v1/repositories/rubygems/group", :params (), :request-body true}, :createRepository_5 {:summary "Create raw group repository", :method :post, :path "/v1/repositories/raw/group", :params (), :request-body true}, :getRepository_10 {:summary "Get repository", :method :get, :path "/v1/repositories/npm/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :invalidateCache {:summary "Invalidate repository cache. Proxy or group repositories only.", :method :post, :path "/v1/repositories/{repositoryName}/invalidate-cache", :params ({:name "repositoryName", :in :path})}, :updateRepository_7 {:summary "Update raw proxy repository", :method :put, :path "/v1/repositories/raw/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :createRepository_21 {:summary "Create Yum hosted repository", :method :post, :path "/v1/repositories/yum/hosted", :params (), :request-body true}, :createPrivilege_2 {:summary "Create a repository content selector type privilege.", :method :post, :path "/v1/security/privileges/repository-content-selector", :params (), :request-body true}, :updateRepository_34 {:summary "Update Cocoapods proxy repository", :method :put, :path "/v1/repositories/cocoapods/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :uploadComponent {:summary "Upload a single component", :method :post, :path "/v1/components", :params ({:name "repository", :in :query}), :request-body true}, :getTrustStoreCertificates {:summary "Retrieve a list of certificates added to the trust store.", :method :get, :path "/v1/security/ssl/truststore", :params ()}, :get {:summary "Get read-only state", :method :get, :path "/v1/read-only", :params ()}, :getActiveRealms {:summary "List the active realm IDs in order", :method :get, :path "/v1/security/realms/active", :params ()}, :getRoles {:summary "List roles", :method :get, :path "/v1/security/roles", :params ({:name "source", :in :query})}, :createRepository_4 {:summary "Create APT proxy repository", :method :post, :path "/v1/repositories/apt/proxy", :params (), :request-body true}, :createRepository_10 {:summary "Create npm proxy repository", :method :post, :path "/v1/repositories/npm/proxy", :params (), :request-body true}, :read_1 {:summary "Read stored script by name", :method :get, :path "/v1/script/{name}", :params ({:name "name", :in :path})}, :getPrivilege {:summary "Retrieve a privilege by name.", :method :get, :path "/v1/security/privileges/{privilegeName}", :params ({:name "privilegeName", :in :path})}, :run {:summary "Run task", :method :post, :path "/v1/tasks/{id}/run", :params ({:name "id", :in :path})}, :updateRepository_40 {:summary "Update Bower proxy repository", :method :put, :path "/v1/repositories/bower/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :createPrivilege_1 {:summary "Create an application type privilege.", :method :post, :path "/v1/security/privileges/application", :params (), :request-body true}, :getRepository_34 {:summary "Get repository", :method :get, :path "/v1/repositories/r/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :createBlobStore {:summary "Create an S3 blob store", :method :post, :path "/v1/blobstores/s3", :params (), :request-body true}, :updateRepository_19 {:summary "Update Docker group repository", :method :put, :path "/v1/repositories/docker/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :deleteLdapServer {:summary "Delete LDAP server", :method :delete, :path "/v1/security/ldap/{name}", :params ({:name "name", :in :path})}, :createRepository_23 {:summary "Create Helm hosted repository", :method :post, :path "/v1/repositories/helm/hosted", :params (), :request-body true}, :getRepositories_1 {:summary "List repositories", :method :get, :path "/v1/repositories", :params ()}, :getRepository_6 {:summary "Get repository", :method :get, :path "/v1/repositories/raw/group/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :deleteUser {:summary "Delete a user.", :method :delete, :path "/v1/security/users/{userId}", :params ({:name "userId", :in :path})}, :updateRepository_3 {:summary "Update APT hosted repository", :method :put, :path "/v1/repositories/apt/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :changeOrder {:summary "Change LDAP server order", :method :post, :path "/v1/security/ldap/change-order", :params (), :request-body true}, :getRepository_23 {:summary "Get repository", :method :get, :path "/v1/repositories/yum/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :read {:summary "Get Anonymous Access settings", :method :get, :path "/v1/security/anonymous", :params ()}, :createPrivilege {:summary "Create a wildcard type privilege.", :method :post, :path "/v1/security/privileges/wildcard", :params (), :request-body true}, :freeze {:summary "Enable read-only", :method :post, :path "/v1/read-only/freeze", :params ()}, :getRepository_13 {:summary "Get repository", :method :get, :path "/v1/repositories/nuget/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :getRepository_22 {:summary "Get repository", :method :get, :path "/v1/repositories/yum/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :getConfiguration {:summary "Get Sonatype Repository Firewall configuration", :method :get, :path "/v1/iq", :params ()}, :removeCertificate {:summary "Remove a certificate in the trust store.", :method :delete, :path "/v1/security/ssl/truststore/{id}", :params ({:name "id", :in :path})}, :getRepository_38 {:summary "Get repository", :method :get, :path "/v1/repositories/p2/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :createRepository_17 {:summary "Create Docker group repository", :method :post, :path "/v1/repositories/docker/group", :params (), :request-body true}, :updateRepository_12 {:summary "Update NuGet hosted repository", :method :put, :path "/v1/repositories/nuget/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :createPrivilege_3 {:summary "Create a repository admin type privilege.", :method :post, :path "/v1/security/privileges/repository-admin", :params (), :request-body true}, :getRepository_14 {:summary "Get repository", :method :get, :path "/v1/repositories/nuget/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :getRepository_40 {:summary "Get repository", :method :get, :path "/v1/repositories/bower/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :createRepository_19 {:summary "Create Docker proxy repository", :method :post, :path "/v1/repositories/docker/proxy", :params (), :request-body true}, :updateRepository_24 {:summary "Update Helm proxy repository", :method :put, :path "/v1/repositories/helm/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :updateRepository_38 {:summary "Update Bower group repository", :method :put, :path "/v1/repositories/bower/group/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :createRepository_20 {:summary "Create Yum group repository", :method :post, :path "/v1/repositories/yum/group", :params (), :request-body true}, :getRepository_37 {:summary "Get repository", :method :get, :path "/v1/repositories/go/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :updateRepository_33 {:summary "Update R proxy repository", :method :put, :path "/v1/repositories/r/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :getRepository_16 {:summary "Get repository", :method :get, :path "/v1/repositories/rubygems/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :updateRepository_14 {:summary "Update RubyGems group repository", :method :put, :path "/v1/repositories/rubygems/group/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :getRealms {:summary "List the available realms", :method :get, :path "/v1/security/realms/available", :params ()}, :get_2 {:summary "Get upload field requirements for each supported format", :method :get, :path "/v1/formats/upload-specs", :params ()}, :updateRepository_20 {:summary "Update Yum group repository", :method :put, :path "/v1/repositories/yum/group/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :updateRoutingRule {:summary "Update a single routing rule", :method :put, :path "/v1/routing-rules/{name}", :params ({:name "name", :in :path}), :request-body true}, :getRoutingRules {:summary "List routing rules", :method :get, :path "/v1/routing-rules", :params ()}, :getRepository_1 {:summary "Get repository", :method :get, :path "/v1/repositories/maven/group/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :deleteRepository {:summary "Delete repository of any format", :method :delete, :path "/v1/repositories/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :getTaskById {:summary "Get a single task by id", :method :get, :path "/v1/tasks/{id}", :params ({:name "id", :in :path})}, :getBlobStore {:summary "Get a S3 blob store configuration by name", :method :get, :path "/v1/blobstores/s3/{name}", :params ({:name "name", :in :path})}, :getRepository_17 {:summary "Get repository", :method :get, :path "/v1/repositories/rubygems/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :createRepository_9 {:summary "Create npm hosted repository", :method :post, :path "/v1/repositories/npm/hosted", :params (), :request-body true}, :create {:summary "Create role", :method :post, :path "/v1/security/roles", :params (), :request-body true}, :createBlobStore_1 {:summary "Create an Azure blob store", :method :post, :path "/v1/blobstores/azure", :params (), :request-body true}, :getRepository_18 {:summary "Get repository", :method :get, :path "/v1/repositories/docker/group/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :getRepository_29 {:summary "Get repository", :method :get, :path "/v1/repositories/pypi/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :verifyConnection_1 {:summary "Verify connection using supplied Azure Blob Store settings", :method :post, :path "/v1/azureblobstore/test-connection", :params (), :request-body true}, :getTasks {:summary "List tasks", :method :get, :path "/v1/tasks", :params ({:name "type", :in :query})}, :supportzippath {:summary "Creates a support zip and returns the path", :method :post, :path "/v1/support/supportzippath", :params (), :request-body true}, :browse {:summary "List all stored scripts", :method :get, :path "/v1/script", :params ()}, :createRepository_2 {:summary "Create Maven proxy repository", :method :post, :path "/v1/repositories/maven/proxy", :params (), :request-body true}, :updateBlobStore {:summary "Update an S3 blob store configuration by name", :method :put, :path "/v1/blobstores/s3/{name}", :params ({:name "name", :in :path}), :request-body true}, :updateRepository_27 {:summary "Update PyPI hosted repository", :method :put, :path "/v1/repositories/pypi/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :createRepository_31 {:summary "Create R group repository", :method :post, :path "/v1/repositories/r/group", :params (), :request-body true}, :deletePrivilege {:summary "Delete a privilege by name.", :method :delete, :path "/v1/security/privileges/{privilegeName}", :params ({:name "privilegeName", :in :path})}, :getAssetById {:summary "Get a single asset", :method :get, :path "/v1/assets/{id}", :params ({:name "id", :in :path})}, :updateRepository_5 {:summary "Update raw group repository", :method :put, :path "/v1/repositories/raw/group/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :getRole {:summary "Get role", :method :get, :path "/v1/security/roles/{id}", :params ({:name "source", :in :query} {:name "id", :in :path})}, :edit {:summary "Update stored script by name", :method :put, :path "/v1/script/{name}", :params ({:name "name", :in :path}), :request-body true}, :disableIq {:summary "Disable Sonatype Repository Firewall", :method :post, :path "/v1/iq/disable", :params ()}, :getEmailConfiguration {:summary "Retrieve the current email configuration", :method :get, :path "/v1/email", :params ()}, :getComponentById {:summary "Get a single component", :method :get, :path "/v1/components/{id}", :params ({:name "id", :in :path})}, :isWritable {:summary "Health check endpoint that validates server can respond to read and write requests", :method :get, :path "/v1/status/writable", :params ()}, :testEmailConfiguration {:summary "Send a test email to the email address provided in the request body", :method :post, :path "/v1/email/verify", :params (), :request-body true}, :enableIq {:summary "Enable Sonatype Repository Firewall", :method :post, :path "/v1/iq/enable", :params ()}, :getRepositories {:summary "List repositories", :method :get, :path "/v1/repositorySettings", :params ()}, :getRepository_35 {:summary "Get repository", :method :get, :path "/v1/repositories/cocoapods/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :release {:summary "Release read-only", :method :post, :path "/v1/read-only/release", :params ()}, :createRepository_8 {:summary "Create npm group repository", :method :post, :path "/v1/repositories/npm/group", :params (), :request-body true}, :updateRepository_31 {:summary "Update R group repository", :method :put, :path "/v1/repositories/r/group/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :createRepository_1 {:summary "Create Maven hosted repository", :method :post, :path "/v1/repositories/maven/hosted", :params (), :request-body true}, :createContentSelector {:summary "Create a new content selector", :method :post, :path "/v1/security/content-selectors", :params (), :request-body true}, :updateRepository_32 {:summary "Update R hosted repository", :method :put, :path "/v1/repositories/r/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :createRepository_12 {:summary "Create NuGet hosted repository", :method :post, :path "/v1/repositories/nuget/hosted", :params (), :request-body true}, :createRepository_15 {:summary "Create RubyGems hosted repository", :method :post, :path "/v1/repositories/rubygems/hosted", :params (), :request-body true}, :createRepository_26 {:summary "Create PyPI group repository", :method :post, :path "/v1/repositories/pypi/group", :params (), :request-body true}, :getRepository_15 {:summary "Get repository", :method :get, :path "/v1/repositories/rubygems/group/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :createRepository_27 {:summary "Create PyPI hosted repository", :method :post, :path "/v1/repositories/pypi/hosted", :params (), :request-body true}, :updateRepository_16 {:summary "Update RubyGems proxy repository", :method :put, :path "/v1/repositories/rubygems/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :update {:summary "Update Anonymous Access settings", :method :put, :path "/v1/security/anonymous", :params (), :request-body true}, :delete {:summary "Delete role", :method :delete, :path "/v1/security/roles/{id}", :params ({:name "id", :in :path})}, :getContentSelector {:summary "Get a content selector by name", :method :get, :path "/v1/security/content-selectors/{name}", :params ({:name "name", :in :path})}, :forceRelease {:summary "Forcibly release read-only", :method :post, :path "/v1/read-only/force-release", :params ()}, :updateRepository_8 {:summary "Update npm group repository", :method :put, :path "/v1/repositories/npm/group/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :deleteAsset {:summary "Delete a single asset", :method :delete, :path "/v1/assets/{id}", :params ({:name "id", :in :path})}, :createRepository_7 {:summary "Create raw proxy repository", :method :post, :path "/v1/repositories/raw/proxy", :params (), :request-body true}, :createRepository_16 {:summary "Create RubyGems proxy repository", :method :post, :path "/v1/repositories/rubygems/proxy", :params (), :request-body true}, :get_1 {:summary "Get upload field requirements for the desired format", :method :get, :path "/v1/formats/{format}/upload-specs", :params ({:name "format", :in :path})}, :quotaStatus {:summary "Get quota status for a given blob store", :method :get, :path "/v1/blobstores/{name}/quota-status", :params ({:name "name", :in :path})}, :getUsers {:summary "Retrieve a list of users. Note if the source is not 'default' the response is limited to 100 users.", :method :get, :path "/v1/security/users", :params ({:name "userId", :in :query} {:name "source", :in :query})}, :updateRepository_37 {:summary "Update p2 proxy repository", :method :put, :path "/v1/repositories/p2/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :updateRepository {:summary "Update Maven group repository", :method :put, :path "/v1/repositories/maven/group/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :updateContentSelector {:summary "Update a content selector", :method :put, :path "/v1/security/content-selectors/{name}", :params ({:name "name", :in :path}), :request-body true}, :deleteComponent {:summary "Delete a single component", :method :delete, :path "/v1/components/{id}", :params ({:name "id", :in :path})}, :createRepository_40 {:summary "Create Bower proxy repository", :method :post, :path "/v1/repositories/bower/proxy", :params (), :request-body true}, :updateBlobStore_1 {:summary "Update an Azure blob store configuration by name", :method :put, :path "/v1/blobstores/azure/{name}", :params ({:name "name", :in :path}), :request-body true}, :search {:summary "Search components", :method :get, :path "/v1/search", :params ({:name "continuationToken", :in :query} {:name "sort", :in :query} {:name "direction", :in :query} {:name "timeout", :in :query} {:name "q", :in :query} {:name "repository", :in :query} {:name "format", :in :query} {:name "group", :in :query} {:name "name", :in :query} {:name "version", :in :query} {:name "prerelease", :in :query} {:name "md5", :in :query} {:name "sha1", :in :query} {:name "sha256", :in :query} {:name "sha512", :in :query} {:name "conan.baseVersion", :in :query} {:name "conan.channel", :in :query} {:name "conan.revision", :in :query} {:name "conan.packageId", :in :query} {:name "conan.packageRevision", :in :query} {:name "docker.imageName", :in :query} {:name "docker.imageTag", :in :query} {:name "docker.layerId", :in :query} {:name "docker.contentDigest", :in :query} {:name "maven.groupId", :in :query} {:name "maven.artifactId", :in :query} {:name "maven.baseVersion", :in :query} {:name "maven.extension", :in :query} {:name "maven.classifier", :in :query} {:name "gavec", :in :query} {:name "npm.scope", :in :query} {:name "npm.author", :in :query} {:name "npm.description", :in :query} {:name "npm.keywords", :in :query} {:name "npm.license", :in :query} {:name "npm.tagged_is", :in :query} {:name "npm.tagged_not", :in :query} {:name "nuget.id", :in :query} {:name "nuget.tags", :in :query} {:name "nuget.title", :in :query} {:name "nuget.authors", :in :query} {:name "nuget.description", :in :query} {:name "nuget.summary", :in :query} {:name "p2.pluginName", :in :query} {:name "pypi.classifiers", :in :query} {:name "pypi.description", :in :query} {:name "pypi.keywords", :in :query} {:name "pypi.summary", :in :query} {:name "rubygems.description", :in :query} {:name "rubygems.platform", :in :query} {:name "rubygems.summary", :in :query} {:name "yum.architecture", :in :query} {:name "yum.name", :in :query})}, :getRepository_4 {:summary "Get repository", :method :get, :path "/v1/repositories/apt/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :createRepository_3 {:summary "Create APT hosted repository", :method :post, :path "/v1/repositories/apt/hosted", :params (), :request-body true}, :getLdapServer {:summary "Get LDAP server", :method :get, :path "/v1/security/ldap/{name}", :params ({:name "name", :in :path})}, :updateFileBlobStore {:summary "Update a file blob store configuration by name", :method :put, :path "/v1/blobstores/file/{name}", :params ({:name "name", :in :path}), :request-body true}, :getAssets {:summary "List assets", :method :get, :path "/v1/assets", :params ({:name "continuationToken", :in :query} {:name "repository", :in :query})}, :getPhase {:summary "Get current lifecycle phase", :method :get, :path "/v1/lifecycle/phase", :params ()}, :getRepository_5 {:summary "Get repository", :method :get, :path "/v1/repositories/apt/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :createRepository_38 {:summary "Create Bower group repository", :method :post, :path "/v1/repositories/bower/group", :params (), :request-body true}, :getRepository_27 {:summary "Get repository", :method :get, :path "/v1/repositories/pypi/group/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :updateRepository_29 {:summary "Update conda proxy repository", :method :put, :path "/v1/repositories/conda/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :rebuildIndex {:summary "Schedule a 'Repair - Rebuild repository search' Task. Hosted or proxy repositories only.", :method :post, :path "/v1/repositories/{repositoryName}/rebuild-index", :params ({:name "repositoryName", :in :path})}, :getRepository_19 {:summary "Get repository", :method :get, :path "/v1/repositories/docker/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :setActiveRealms {:summary "Set the active security realms in the order they should be used", :method :put, :path "/v1/security/realms/active", :params (), :request-body true}, :getRepository_3 {:summary "Get repository", :method :get, :path "/v1/repositories/maven/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :removeLicense {:summary "Uninstall license if present.", :method :delete, :path "/v1/system/license", :params ()}, :createRepository_39 {:summary "Create Bower hosted repository", :method :post, :path "/v1/repositories/bower/hosted", :params (), :request-body true}, :bounce {:summary "Bounce lifecycle phase", :method :put, :path "/v1/lifecycle/bounce", :params (), :request-body true}, :delete_1 {:summary "Delete stored script by name", :method :delete, :path "/v1/script/{name}", :params ({:name "name", :in :path})}, :updatePrivilege_3 {:summary "Update a repository content selector type privilege.", :method :put, :path "/v1/security/privileges/repository-content-selector/{privilegeName}", :params ({:name "privilegeName", :in :path}), :request-body true}, :createRepository_25 {:summary "Create Git LFS hosted repository", :method :post, :path "/v1/repositories/gitlfs/hosted", :params (), :request-body true}, :verifyConnection {:summary "Verify Sonatype Repository Firewall connection", :method :post, :path "/v1/iq/verify-connection", :params ()}, :createRepository_28 {:summary "Create PyPI proxy repository", :method :post, :path "/v1/repositories/pypi/proxy", :params (), :request-body true}, :updateRepository_2 {:summary "Update Maven proxy repository", :method :put, :path "/v1/repositories/maven/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :getLicenseStatus {:summary "Get the current license status.", :method :get, :path "/v1/system/license", :params ()}, :stop {:summary "Stop task", :method :post, :path "/v1/tasks/{id}/stop", :params ({:name "id", :in :path})}, :updateRepository_6 {:summary "Update raw hosted repository", :method :put, :path "/v1/repositories/raw/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :createRepository_13 {:summary "Create NuGet proxy repository", :method :post, :path "/v1/repositories/nuget/proxy", :params (), :request-body true}, :createPrivilege_4 {:summary "Create a repository view type privilege.", :method :post, :path "/v1/security/privileges/repository-view", :params (), :request-body true}, :getRepository_30 {:summary "Get repository", :method :get, :path "/v1/repositories/conda/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :deleteBlobStore {:summary "Delete a blob store by name", :method :delete, :path "/v1/blobstores/{name}", :params ({:name "name", :in :path})}, :getRepository_28 {:summary "Get repository", :method :get, :path "/v1/repositories/pypi/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :getLdapServers {:summary "List LDAP servers", :method :get, :path "/v1/security/ldap", :params ()}, :getComponents {:summary "List components", :method :get, :path "/v1/components", :params ({:name "continuationToken", :in :query} {:name "repository", :in :query})}, :getRepository_31 {:summary "Get repository", :method :get, :path "/v1/repositories/conan/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :getRepository_33 {:summary "Get repository", :method :get, :path "/v1/repositories/r/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :updateRepository_17 {:summary "Update Docker group repository", :method :put, :path "/v1/repositories/docker/group/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :updateRepository_11 {:summary "Update NuGet group repository", :method :put, :path "/v1/repositories/nuget/group/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :updateLdapServer {:summary "Update LDAP server", :method :put, :path "/v1/security/ldap/{name}", :params ({:name "name", :in :path}), :request-body true}, :createRepository_36 {:summary "Create a Go proxy repository", :method :post, :path "/v1/repositories/go/proxy", :params (), :request-body true}, :updateRepository_4 {:summary "Update APT proxy repository", :method :put, :path "/v1/repositories/apt/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :disableRepositoryHealthCheck {:summary "Disable repository health check. Proxy repositories only.", :method :delete, :path "/v1/repositories/{repositoryName}/health-check", :params ({:name "repositoryName", :in :path})}, :createRepository_6 {:summary "Create raw hosted repository", :method :post, :path "/v1/repositories/raw/hosted", :params (), :request-body true}, :getRoutingRule {:summary "Get a single routing rule", :method :get, :path "/v1/routing-rules/{name}", :params ({:name "name", :in :path})}, :supportzip {:summary "Creates and downloads a support zip", :method :post, :path "/v1/support/supportzip", :params (), :request-body true}, :listBlobStores {:summary "List the blob stores", :method :get, :path "/v1/blobstores", :params ()}, :updateRepository_23 {:summary "Update Helm hosted repository", :method :put, :path "/v1/repositories/helm/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :updateConfiguration {:summary "Update Sonatype Repository Firewall configuration", :method :put, :path "/v1/iq", :params (), :request-body true}, :retrieveCertificate {:summary "Helper method to retrieve certificate details from a remote system.", :method :get, :path "/v1/security/ssl", :params ({:name "host", :in :query} {:name "port", :in :query} {:name "protocolHint", :in :query})}, :updateRepository_15 {:summary "Update RubyGems hosted repository", :method :put, :path "/v1/repositories/rubygems/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :updateRepository_25 {:summary "Update Git LFS hosted repository", :method :put, :path "/v1/repositories/gitlfs/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :getRepository_26 {:summary "Get repository", :method :get, :path "/v1/repositories/gitlfs/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :getRepository_7 {:summary "Get repository", :method :get, :path "/v1/repositories/raw/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :getRepository_8 {:summary "Get repository", :method :get, :path "/v1/repositories/raw/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :getUserSources {:summary "Retrieve a list of the available user sources.", :method :get, :path "/v1/security/user-sources", :params ()}, :createRepository_34 {:summary "Create Cocoapods proxy repository", :method :post, :path "/v1/repositories/cocoapods/proxy", :params (), :request-body true}, :createRepository_24 {:summary "Create Helm proxy repository", :method :post, :path "/v1/repositories/helm/proxy", :params (), :request-body true}, :getRepository {:summary "Get repository details", :method :get, :path "/v1/repositories/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :createPrivilege_5 {:summary "Create a script type privilege.", :method :post, :path "/v1/security/privileges/script", :params (), :request-body true}, :updatePrivilege_1 {:summary "Update an application type privilege.", :method :put, :path "/v1/security/privileges/application/{privilegeName}", :params ({:name "privilegeName", :in :path}), :request-body true}, :addCertificate {:summary "Add a certificate to the trust store.", :method :post, :path "/v1/security/ssl/truststore", :params (), :request-body true}, :createRepository_22 {:summary "Create Yum proxy repository", :method :post, :path "/v1/repositories/yum/proxy", :params (), :request-body true}, :createRepository {:summary "Create Maven group repository", :method :post, :path "/v1/repositories/maven/group", :params (), :request-body true}, :searchAssets {:summary "Search assets", :method :get, :path "/v1/search/assets", :params ({:name "continuationToken", :in :query} {:name "sort", :in :query} {:name "direction", :in :query} {:name "timeout", :in :query} {:name "q", :in :query} {:name "repository", :in :query} {:name "format", :in :query} {:name "group", :in :query} {:name "name", :in :query} {:name "version", :in :query} {:name "prerelease", :in :query} {:name "md5", :in :query} {:name "sha1", :in :query} {:name "sha256", :in :query} {:name "sha512", :in :query} {:name "conan.baseVersion", :in :query} {:name "conan.channel", :in :query} {:name "conan.revision", :in :query} {:name "conan.packageId", :in :query} {:name "conan.packageRevision", :in :query} {:name "docker.imageName", :in :query} {:name "docker.imageTag", :in :query} {:name "docker.layerId", :in :query} {:name "docker.contentDigest", :in :query} {:name "maven.groupId", :in :query} {:name "maven.artifactId", :in :query} {:name "maven.baseVersion", :in :query} {:name "maven.extension", :in :query} {:name "maven.classifier", :in :query} {:name "gavec", :in :query} {:name "npm.scope", :in :query} {:name "npm.author", :in :query} {:name "npm.description", :in :query} {:name "npm.keywords", :in :query} {:name "npm.license", :in :query} {:name "npm.tagged_is", :in :query} {:name "npm.tagged_not", :in :query} {:name "nuget.id", :in :query} {:name "nuget.tags", :in :query} {:name "nuget.title", :in :query} {:name "nuget.authors", :in :query} {:name "nuget.description", :in :query} {:name "nuget.summary", :in :query} {:name "p2.pluginName", :in :query} {:name "pypi.classifiers", :in :query} {:name "pypi.description", :in :query} {:name "pypi.keywords", :in :query} {:name "pypi.summary", :in :query} {:name "rubygems.description", :in :query} {:name "rubygems.platform", :in :query} {:name "rubygems.summary", :in :query} {:name "yum.architecture", :in :query} {:name "yum.name", :in :query})}, :createRoutingRule {:summary "Create a single routing rule", :method :post, :path "/v1/routing-rules", :params (), :request-body true}, :getRepository_12 {:summary "Get repository", :method :get, :path "/v1/repositories/nuget/group/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :createUser {:summary "Create a new user in the default source.", :method :post, :path "/v1/security/users", :params (), :request-body true}, :updateRepository_18 {:summary "Update Docker hosted repository", :method :put, :path "/v1/repositories/docker/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :updateRepository_36 {:summary "Update a Go proxy repository", :method :put, :path "/v1/repositories/go/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :setPhase {:summary "Move to new lifecycle phase", :method :put, :path "/v1/lifecycle/phase", :params (), :request-body true}, :deleteContentSelector {:summary "Delete a content selector", :method :delete, :path "/v1/security/content-selectors/{name}", :params ({:name "name", :in :path})}, :updateRepository_39 {:summary "Update Bower hosted repository", :method :put, :path "/v1/repositories/bower/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :createRepository_33 {:summary "Create R proxy repository", :method :post, :path "/v1/repositories/r/proxy", :params (), :request-body true}, :update_1 {:summary "Update role", :method :put, :path "/v1/security/roles/{id}", :params ({:name "id", :in :path}), :request-body true}, :getBlobStore_1 {:summary "Get an Azure blob store configuration by name", :method :get, :path "/v1/blobstores/azure/{name}", :params ({:name "name", :in :path})}, :updateRepository_10 {:summary "Update npm proxy repository", :method :put, :path "/v1/repositories/npm/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :updateUser {:summary "Update an existing user.", :method :put, :path "/v1/security/users/{userId}", :params ({:name "userId", :in :path}), :request-body true}, :updatePrivilege_5 {:summary "Update a script type privilege.", :method :put, :path "/v1/security/privileges/script/{privilegeName}", :params ({:name "privilegeName", :in :path}), :request-body true}, :createRepository_37 {:summary "Create p2 proxy repository", :method :post, :path "/v1/repositories/p2/proxy", :params (), :request-body true}, :getRepository_39 {:summary "Get repository", :method :get, :path "/v1/repositories/bower/group/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :deleteEmailConfiguration {:summary "Disable and clear the email configuration", :method :delete, :path "/v1/email", :params ()}, :isAvailable {:summary "Health check endpoint that validates server can respond to read requests", :method :get, :path "/v1/status", :params ()}, :getRepository_25 {:summary "Get repository", :method :get, :path "/v1/repositories/helm/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :updateRepository_21 {:summary "Update Yum hosted repository", :method :put, :path "/v1/repositories/yum/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :getFileBlobStoreConfiguration {:summary "Get a file blob store configuration by name", :method :get, :path "/v1/blobstores/file/{name}", :params ({:name "name", :in :path})}, :updatePrivilege {:summary "Update a wildcard type privilege.", :method :put, :path "/v1/security/privileges/wildcard/{privilegeName}", :params ({:name "privilegeName", :in :path}), :request-body true}, :setEmailConfiguration {:summary "Set the current email configuration", :method :put, :path "/v1/email", :params (), :request-body true}, :getRepository_41 {:summary "Get repository", :method :get, :path "/v1/repositories/bower/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :run_1 {:summary "Run stored script by name", :method :post, :path "/v1/script/{name}/run", :params ({:name "name", :in :path}), :request-body true}, :updateRepository_1 {:summary "Update Maven hosted repository", :method :put, :path "/v1/repositories/maven/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :updateRepository_22 {:summary "Update Yum proxy repository", :method :put, :path "/v1/repositories/yum/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :add {:summary "Add a new script", :method :post, :path "/v1/script", :params (), :request-body true}, :updatePrivilege_4 {:summary "Update a repository admin type privilege.", :method :put, :path "/v1/security/privileges/repository-admin/{privilegeName}", :params ({:name "privilegeName", :in :path}), :request-body true}, :getRepository_9 {:summary "Get repository", :method :get, :path "/v1/repositories/npm/group/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :updateRepository_13 {:summary "Update NuGet proxy repository", :method :put, :path "/v1/repositories/nuget/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :getRepository_32 {:summary "Get repository", :method :get, :path "/v1/repositories/r/group/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :createRepository_35 {:summary "Create a Go group repository", :method :post, :path "/v1/repositories/go/group", :params (), :request-body true}, :searchAndDownloadAssets {:summary "Search and download asset", :method :get, :path "/v1/search/assets/download", :params ({:name "sort", :in :query} {:name "direction", :in :query} {:name "timeout", :in :query} {:name "q", :in :query} {:name "repository", :in :query} {:name "format", :in :query} {:name "group", :in :query} {:name "name", :in :query} {:name "version", :in :query} {:name "prerelease", :in :query} {:name "md5", :in :query} {:name "sha1", :in :query} {:name "sha256", :in :query} {:name "sha512", :in :query} {:name "conan.baseVersion", :in :query} {:name "conan.channel", :in :query} {:name "conan.revision", :in :query} {:name "conan.packageId", :in :query} {:name "conan.packageRevision", :in :query} {:name "docker.imageName", :in :query} {:name "docker.imageTag", :in :query} {:name "docker.layerId", :in :query} {:name "docker.contentDigest", :in :query} {:name "maven.groupId", :in :query} {:name "maven.artifactId", :in :query} {:name "maven.baseVersion", :in :query} {:name "maven.extension", :in :query} {:name "maven.classifier", :in :query} {:name "gavec", :in :query} {:name "npm.scope", :in :query} {:name "npm.author", :in :query} {:name "npm.description", :in :query} {:name "npm.keywords", :in :query} {:name "npm.license", :in :query} {:name "npm.tagged_is", :in :query} {:name "npm.tagged_not", :in :query} {:name "nuget.id", :in :query} {:name "nuget.tags", :in :query} {:name "nuget.title", :in :query} {:name "nuget.authors", :in :query} {:name "nuget.description", :in :query} {:name "nuget.summary", :in :query} {:name "p2.pluginName", :in :query} {:name "pypi.classifiers", :in :query} {:name "pypi.description", :in :query} {:name "pypi.keywords", :in :query} {:name "pypi.summary", :in :query} {:name "rubygems.description", :in :query} {:name "rubygems.platform", :in :query} {:name "rubygems.summary", :in :query} {:name "yum.architecture", :in :query} {:name "yum.name", :in :query})}, :enableRepositoryHealthCheck {:summary "Enable repository health check. Proxy repositories only.", :method :post, :path "/v1/repositories/{repositoryName}/health-check", :params ({:name "repositoryName", :in :path})}, :createFileBlobStore {:summary "Create a file blob store", :method :post, :path "/v1/blobstores/file", :params (), :request-body true}, :updateRepository_28 {:summary "Update PyPI proxy repository", :method :put, :path "/v1/repositories/pypi/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :getRepository_20 {:summary "Get repository", :method :get, :path "/v1/repositories/docker/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :createRepository_32 {:summary "Create R hosted repository", :method :post, :path "/v1/repositories/r/hosted", :params (), :request-body true}, :createRepository_18 {:summary "Create Docker hosted repository", :method :post, :path "/v1/repositories/docker/hosted", :params (), :request-body true}, :createRepository_30 {:summary "Create Conan proxy repository", :method :post, :path "/v1/repositories/conan/proxy", :params (), :request-body true}, :createRepository_29 {:summary "Create conda proxy repository", :method :post, :path "/v1/repositories/conda/proxy", :params (), :request-body true}, :setLicense {:summary "Upload a new license file.", :method :post, :path "/v1/system/license", :params (), :request-body true}, :getContentSelectors {:summary "List content selectors", :method :get, :path "/v1/security/content-selectors", :params ()}, :createLdapServer {:summary "Create LDAP server", :method :post, :path "/v1/security/ldap", :params (), :request-body true}, :updateRepository_9 {:summary "Update npm hosted repository", :method :put, :path "/v1/repositories/npm/hosted/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}, :changePassword {:summary "Change a user's password.", :method :put, :path "/v1/security/users/{userId}/change-password", :params ({:name "userId", :in :path}), :request-body true}, :getRepository_11 {:summary "Get repository", :method :get, :path "/v1/repositories/npm/proxy/{repositoryName}", :params ({:name "repositoryName", :in :path})}, :createRepository_11 {:summary "Create NuGet group repository", :method :post, :path "/v1/repositories/nuget/group", :params (), :request-body true}, :updatePrivilege_2 {:summary "Update a repository view type privilege.", :method :put, :path "/v1/security/privileges/repository-view/{privilegeName}", :params ({:name "privilegeName", :in :path}), :request-body true}, :updateRepository_35 {:summary "Update a Go group repository", :method :put, :path "/v1/repositories/go/group/{repositoryName}", :params ({:name "repositoryName", :in :path}), :request-body true}}}